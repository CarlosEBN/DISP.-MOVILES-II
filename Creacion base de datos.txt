//CREACION DE BASES DE DATOS EN SQLite3

sqlite3 ReservaHotel.db
.open ReservaHotel.db
.databases


-- FORMATEO DE TABLAS PARA QUE SE VEAN EN COLUMNAS EN LA CONSOLA
.header on
.mode column
.timer on

-- CREACION DE TABLAS 

-- Crear la tabla CLIENTE
CREATE TABLE CLIENTE (
    ID_Cliente INTEGER PRIMARY KEY NOT NULL,
    Tipo_Documento TEXT NOT NULL,
    Nombre TEXT NOT NULL,
    Apellidos TEXT NOT NULL,
    Email TEXT NOT NULL,
    Teléfono TEXT NOT NULL
);
PRAGMA table_info(CLIENTE);

-- Crear la tabla SERVICIOS
CREATE TABLE SERVICIOS (
    ID_Servicio INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    Nombre_Servicio TEXT NOT NULL,
    Descripción TEXT NOT NULL,
    Disponibilidad TEXT NOT NULL
);
PRAGMA table_info (SERVICIOS);

-- Crear la tabla Sucur_Hotel
CREATE TABLE Sucur_Hotel (
    ID_Hotel INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    Nombre_Hotel TEXT NOT NULL,
    Dirección TEXT NOT NULL,
    Teléfono TEXT NOT NULL,
    Email TEXT NOT NULL,
    Estrellas INTEGER NOT NULL,
    Ciudad TEXT NOT NULL,
    País TEXT NOT NULL
);
PRAGMA table_info (Sucur_Hotel);


-- Crear la tabla HABITACIÓN
CREATE TABLE HABITACIÓN (
    ID_Habitación INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    Número_Habitación TEXT NOT NULL,
    Capacidad INTEGER NOT NULL,
    Disponibilidad TEXT NOT NULL,
    ID_Hotel INTEGER NOT NULL,
    FOREIGN KEY (ID_Hotel) REFERENCES Sucur_Hotel(ID_Hotel)
);
PRAGMA table_info (HABITACIÓN);


-- Crear la tabla FORMA_PAGO
CREATE TABLE FORMA_PAGO (
    ID_Forma_Pago INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    Tipo_Pago TEXT NOT NULL,
    Detalles_Pago TEXT NOT NULL,
    ID_Servicio INTEGER NOT NULL,
    FOREIGN KEY (ID_Servicio) REFERENCES SERVICIOS(ID_Servicio)
);
PRAGMA table_info (FORMA_PAGO);

-- Crear la tabla Tipo_Habitacion
CREATE TABLE Tipo_Habitacion (
    ID_TipoH INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    Nombre_Tipo TEXT NOT NULL,
    Descripción TEXT NOT NULL,
    Precio TEXT NOT NULL,
    ID_Habitación INTEGER NOT NULL,
    FOREIGN KEY (ID_Habitación) REFERENCES HABITACIÓN(ID_Habitación)
);
PRAGMA table_info (Tipo_Habitacion);

-- Crear la tabla EncReserva
CREATE TABLE EncReserva (
    ID_Reserva INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    Fecha_Inicio DATE NOT NULL,
    Fecha_Fin DATE NOT NULL,
    Est_Reserva TEXT NOT NULL,
    Cant_Per INTEGER NOT NULL,
    ID_Cliente INTEGER NOT NULL,
    ID_TipoH INTEGER NOT NULL,
    ID_Forma_Pago INTEGER NOT NULL,
    FOREIGN KEY (ID_Cliente) REFERENCES CLIENTE(ID_Cliente),
    FOREIGN KEY (ID_TipoH) REFERENCES Tipo_Habitacion(ID_TipoH),
    FOREIGN KEY (ID_Forma_Pago) REFERENCES FORMA_PAGO(ID_Forma_Pago)
);
PRAGMA table_info (EncReserva);


-- Crear la tabla detReserva
CREATE TABLE detReserva (
    ID_det_Reserva INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    Descripción TEXT NOT NULL,
    Descuento REAL NOT NULL,
    Precio REAL NOT NULL,
    ID_Reserva INTEGER NOT NULL,
    FOREIGN KEY (ID_Reserva) REFERENCES EncReserva(ID_Reserva)
);

PRAGMA table_info (detReserva);

-- Insertar valores en la tabla CLIENTE
INSERT INTO CLIENTE (Tipo_Documento,Nombre,Apellidos,Email, Teléfono) VALUES
('CC', 'Juan', 'Pérez', 'juan@gmail.com', '+57 321 1234567'),
('TI', 'María', 'González', 'maria@gmail.com', '+57 310 9876543'),
('CC', 'Carlos', 'García', 'carlos@gmail.com', '+57 300 1112223'),
('CC', 'Ana', 'Rodríguez', 'ana@gmail.com', '+57 318 5554446'),
('CC', 'Anali', 'Marquez', 'analui@gmail.com', '+57 318 5554447');


-- Insertar valores en la tabla Sucur_Hotel
INSERT INTO Sucur_Hotel (Nombre_Hotel,Dirección,Teléfono,Email, Estrellas, Ciudad, País) VALUES
('Hotel Tranquilidad', 'Carrera 10 #20-30', '+57 1 234 5678', 'hoteltranquilidad@gmail.com', 3, 'Bogotá', 'Colombia'),
('Hotel Maravilla', 'Calle 5 #15-60', '+57 2 345 6789', 'hotelmaravilla@gmail.com', 4, 'Cali', 'Colombia'),
('Hotel Pacifico', 'Avenida del Mar 101', '+57 4 456 7890', 'hotelpacifico@gmail.com', 5, 'Cartagena', 'Colombia'),
('Hotel Andino', 'Carrera 7 #45-20', '+57 5 567 8901', 'hotelandino@gmail.com', 4, 'Medellín', 'Colombia'),
('Hotel Limonar', 'Calle 12 #30-25', '+57 6 678 9012', 'hotellimonar@gmail.com', 3, 'Pereira', 'Colombia');

-- Insertar valores en la tabla SERVICIOS
INSERT INTO SERVICIOS (Nombre_Servicio,Descripción,Disponibilidad) VALUES
('Spa','Servicio de spa con masajes y tratamientos faciales.','9:00 AM - 9:00 PM'),
('Restaurante','Restaurante gourmet con cocina internacional.','12:00 PM - 11:00 PM'),
('Gimnasio','Gimnasio equipado con máquinas modernas.','24 horas'),
('Piscina','Piscina al aire libre con vista panorámica.','6:00 AM - 10:00 PM');

-- Insertar valores en la tabla HABITACION					
INSERT INTO HABITACIÓN (Número_Habitación,Capacidad,Disponibilidad,ID_Hotel) VALUES
('101',1,'Disponible',1),
('102',2,'Ocupada',1),
('201',2,'Disponible',2),
('202',3,'Ocupada',2),
('103',3,'Disponible',3),
('104',3,'Disponible',4),
('201',3,'Disponible',5),
('204',3,'Disponible',5);


-- Insertar valores en la tabla FORMA_PAGO				
INSERT INTO FORMA_PAGO (Tipo_Pago,Detalles_Pago,ID_Servicio) VALUES
('Tarjeta','Pago con tarjeta de crédito/débito',1),
('Efectivo','Pago en efectivo',2),
('Transferencia','Transferencia bancaria',2),
('efectivo','Pago en efectivo',4);

-- Insertar valores en la tabla Tipo_Habitacion
INSERT INTO Tipo_Habitacion (Nombre_Tipo,Descripción,Precio,ID_Habitación) VALUES	
('Sencilla','Habitación sencilla con cama individual y baño.',200000,1),	
('Doble','Habitación doble con dos camas individuales.',320000,2),	
('Suite','Suite con cama king, sala de estar y jacuzzi.',600000,3),	
('Familiar','Habitación familiar con dos camas dobles y balcón.',480000,4),	
('Deluxe','Habitación deluxe con vista al mar y minibar.',800000,5);	


-- Insertar valores en la tabla EncReserva
INSERT INTO EncReserva (Fecha_Inicio,Fecha_Fin,Est_Reserva,Cant_Per, ID_Cliente, ID_TipoH, ID_Forma_Pago) VALUES
('10/06/2024', '15/06/2024', 'Confirmada', 2,1,3, 2),
('5/07/2024', '8/07/2024', 'Pendiente', 1,2,1, 1),
('20/08/2024', '25/08/2024', 'Confirmada', 3,3,2, 4),
('15/09/2024', '20/09/2024', 'Pendiente', 2,4,4, 3),
('15/04/2025', '20/04/2025', 'Pendiente', 2,5,3, 3);


-- Insertar valores en la tabla detReserva
INSERT INTO detReserva (Descripción,Descuento,Precio,ID_Reserva) VALUES
('Desayuno incluido',0,50000,1),
('Paquete de bienvenida',0.1,200000,1),
('Uso de minibar',0,150000,2),
('Acceso al spa',0.15,300000,3);

---------------------------------------------------------------------------------------------------------------
d) En sentencias (scripts) SQL realice:  

-- Obtener el ingreso total por cada tipo de habitación
SELECT 
  th.ID_TipoH, 
  SUM(dr.Precio) as Ingreso_Total
FROM 
  detReserva dr
JOIN 
  EncReserva er ON dr.ID_Reserva = er.ID_Reserva
JOIN 
  Tipo_Habitacion th ON er.ID_TipoH = th.ID_TipoH
GROUP BY 
  th.ID_TipoH;

-- Contar la cantidad de reservas en cada hotel
SELECT
  h.ID_Hotel,
  COUNT(r.ID_Reserva) as Total_Reservas
FROM
  Sucur_Hotel h
JOIN
  HABITACIÓN hab ON h.ID_Hotel = hab.ID_Hotel
JOIN
  Tipo_Habitacion th ON hab.ID_Habitación = th.ID_Habitación
JOIN
  EncReserva r ON th.ID_TipoH = r.ID_TipoH
GROUP BY
  h.ID_Hotel;

-- Seleccionar todos los tipos de documento distintos
SELECT DISTINCT Tipo_Documento
FROM CLIENTE;

-- Seleccionar clientes cuyo nombre comienza con 'J'
SELECT *
FROM CLIENTE
WHERE Nombre LIKE 'J%';

-- Seleccionar reservas con fechas entre dos fechas específicas
SELECT *
FROM EncReserva
WHERE Fecha_Inicio BETWEEN '01/01/2024' AND '31/12/2024';


-- Seleccionar todos los clientes con nombre 'Juan'
-- La selección (σ) en álgebra relacional se utiliza para obtener las tuplas (filas) que cumplen con una condición específica.
SELECT *
FROM CLIENTE
WHERE Nombre = 'Juan';

-- Obtener el ingreso total por cada tipo de habitación, pero solo aquellos con un ingreso total superior a 150000
SELECT 
  th.ID_TipoH, 
  SUM(dr.Precio) as Ingreso_Total
FROM 
  detReserva dr
JOIN 
  EncReserva er ON dr.ID_Reserva = er.ID_Reserva
JOIN 
  Tipo_Habitacion th ON er.ID_TipoH = th.ID_TipoH
GROUP BY 
  th.ID_TipoH
HAVING 
  SUM(dr.Precio) > 150000;

-- Seleccionar todos los clientes, ordenados por apellido
SELECT *
FROM CLIENTE
ORDER BY Apellidos;

-- Seleccionar los primeros 5 clientes
SELECT *
FROM CLIENTE
ORDER BY ID_Cliente
LIMIT 5;




-----------------------------------------------------------------------------------------------+
-----------------------------------------------------------------------------------------------+

-- Unión de CLIENTE y EncReserva en cuanto a los ID_Cliente 
SELECT ID_Cliente FROM CLIENTE
UNION
SELECT ID_Cliente FROM EncReserva;
----------------------------------------------------------------------------------------------
-- Intersección de CLIENTE y EncReserva en cuanto a los ID_Cliente
SELECT ID_Cliente FROM CLIENTE
INTERSECT
SELECT ID_Cliente FROM EncReserva;

-----------------------------------------------------------------------------------------------
-- Renombrar columnas de CLIENTE
SELECT ID_Cliente AS ID_Renombrado, Nombre AS Nombre_Renombrado, Apellidos AS Apellidos_Renombrados
FROM CLIENTE;

-- Crear una vista con nombre nuevo para CLIENTE
CREATE VIEW NuevoCliente AS
SELECT * FROM CLIENTE;
-----------------------------------------------------------------------------------------------

-- Diferencia de CLIENTE y EncReserva en cuanto a los  ID_Cliente (elementos en CLIENTE pero no en EncReserva)
SELECT ID_Cliente FROM CLIENTE
EXCEPT
SELECT ID_Cliente FROM EncReserva;

-- Diferencia de EncReserva y CLIENTE en cuanto a los ID_Cliente (elementos en EncReserva pero no en CLIENTE)
SELECT ID_Cliente FROM EncReserva
EXCEPT
SELECT ID_Cliente FROM CLIENTE;

-----------------------------------------------------------------------------------------------
-- Diferencias Simétricas de CLIENTE y EncReserva en cuanto a los ID_Cliente
SELECT  ID_Renombrado FROM CLIENTE
EXCEPT
SELECT ID_Cliente FROM EncReserva
UNION
SELECT ID_Cliente FROM EncReserva
EXCEPT
SELECT  ID_Renombrado FROM CLIENTE;

-----------------------------------------------------------------------------------------------

-- Producto Cartesiano de CLIENTE y SERVICIOS
SELECT * FROM CLIENTE, SERVICIOS;

-- Producto Cartesiano de CLIENTE y SERVICIOS (usando CROSS JOIN)
SELECT * FROM CLIENTE
CROSS JOIN SERVICIOS;

--------------------------------------------------------------------------------------------------------+
--------------------------------------------------------------------------------------------------------+

--La selección (σ) en álgebra relacional se utiliza para obtener las tuplas (filas) que cumplen con una condición específica.
-- Selección de clientes con nombre 'Juan'
SELECT * FROM CLIENTE WHERE Nombre = 'Juan';

--La proyección (π) se utiliza para obtener ciertas columnas de una tabla, eliminando duplicados.
-- Proyección para obtener solo los nombres y apellidos de los clientes
SELECT DISTINCT Nombre, Apellidos FROM CLIENTE;


--El FULL JOIN (o FULL OUTER JOIN) combina todas las tuplas de dos relaciones, rellenando con NULL las que no tienen correspondencia en la otra relación.
-- Emulación de FULL JOIN entre CLIENTE y EncReserva
SELECT *
FROM CLIENTE c
LEFT JOIN EncReserva r ON c.ID_Cliente = r.ID_Cliente
UNION
SELECT *
FROM CLIENTE c
RIGHT JOIN EncReserva r ON c.ID_Cliente = r.ID_Cliente;


--El NATURAL JOIN une tablas automáticamente utilizando columnas con el mismo nombre y tipo de datos.
-- Natural join entre CLIENTE y EncReserva (asegurando que las columnas comunes se llamen igual)
SELECT *
FROM CLIENTE
NATURAL JOIN EncReserva;


--El INNER JOIN devuelve solo las tuplas que tienen coincidencias en ambas relaciones.
-- Inner join entre EncReserva y CLIENTE
SELECT *
FROM EncReserva r
INNER JOIN CLIENTE c ON r.ID_Cliente = c.ID_Cliente;


--El LEFT JOIN devuelve todas las tuplas de la relación de la izquierda y las tuplas coincidentes de la relación de la derecha. Las tuplas de la relación de la derecha que no tienen coincidencia en la izquierda se rellenan con NULL.
-- Left join entre EncReserva y CLIENTE
SELECT *
FROM EncReserva r
LEFT JOIN CLIENTE c ON r.ID_Cliente = c.ID_Cliente;


--El RIGHT JOIN es el inverso del LEFT JOIN: devuelve todas las tuplas de la relación de la derecha y las tuplas coincidentes de la relación de la izquierda. Las tuplas de la relación de la izquierda que no tienen coincidencia en la derecha se rellenan con NULL. En SQLite, esto se emula usando LEFT JOIN en el orden inverso.
-- Emulación de RIGHT JOIN entre EncReserva y CLIENTE
SELECT *
FROM CLIENTE c
LEFT JOIN EncReserva r ON c.ID_Cliente = r.ID_Cliente;


--El FULL OUTER JOIN combina todas las tuplas de dos relaciones, rellenando con NULL las que no tienen correspondencia en la otra relación.
-- Emulación de FULL OUTER JOIN entre CLIENTE y EncReserva
SELECT *
FROM CLIENTE c
LEFT JOIN EncReserva r ON c.ID_Cliente = r.ID_Cliente
UNION
SELECT *
FROM CLIENTE c
RIGHT JOIN EncReserva r ON c.ID_Cliente = r.ID_Cliente;


--Generalmente, "outer join" se refiere a un FULL OUTER JOIN.
-- Emulación de FULL OUTER JOIN entre CLIENTE y EncReserva
SELECT *
FROM CLIENTE c
LEFT JOIN EncReserva r ON c.ID_Cliente = r.ID_Cliente
UNION
SELECT *
FROM CLIENTE c
RIGHT JOIN EncReserva r ON c.ID_Cliente = r.ID_Cliente;


--El LEFT OUTER JOIN es simplemente otro término para LEFT JOIN.
-- Left Outer Join entre EncReserva y CLIENTE
SELECT *
FROM EncReserva r
LEFT JOIN CLIENTE c ON r.ID_Cliente = c.ID_Cliente;


--Similarmente, RIGHT OUTER JOIN es otro término para RIGHT JOIN, que se puede emular con un LEFT JOIN invirtiendo el orden de las tablas.
-- Emulación de Right Outer Join entre EncReserva y CLIENTE
SELECT *
FROM CLIENTE c
LEFT JOIN EncReserva r ON c.ID_Cliente = r.ID_Cliente;






					
